// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ChiuMethod
RObject ChiuMethod(SEXP data_r, SEXP exponential_r, SEXP potential_r, double r_a, double eps_high, double eps_low);
RcppExport SEXP Clustering_ChiuMethod(SEXP data_rSEXP, SEXP exponential_rSEXP, SEXP potential_rSEXP, SEXP r_aSEXP, SEXP eps_highSEXP, SEXP eps_lowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data_r(data_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type exponential_r(exponential_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type potential_r(potential_rSEXP);
    Rcpp::traits::input_parameter< double >::type r_a(r_aSEXP);
    Rcpp::traits::input_parameter< double >::type eps_high(eps_highSEXP);
    Rcpp::traits::input_parameter< double >::type eps_low(eps_lowSEXP);
    rcpp_result_gen = Rcpp::wrap(ChiuMethod(data_r, exponential_r, potential_r, r_a, eps_high, eps_low));
    return rcpp_result_gen;
END_RCPP
}
// timeseries_in_centers
std::vector<NumericVector > timeseries_in_centers(SEXP groups_v, int ncenters);
RcppExport SEXP Clustering_timeseries_in_centers(SEXP groups_vSEXP, SEXP ncentersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type groups_v(groups_vSEXP);
    Rcpp::traits::input_parameter< int >::type ncenters(ncentersSEXP);
    rcpp_result_gen = Rcpp::wrap(timeseries_in_centers(groups_v, ncenters));
    return rcpp_result_gen;
END_RCPP
}
// compareClustering
RObject compareClustering(SEXP groups_1_v, int ncenters_1, SEXP groups_2_v, int ncenters_2);
RcppExport SEXP Clustering_compareClustering(SEXP groups_1_vSEXP, SEXP ncenters_1SEXP, SEXP groups_2_vSEXP, SEXP ncenters_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type groups_1_v(groups_1_vSEXP);
    Rcpp::traits::input_parameter< int >::type ncenters_1(ncenters_1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type groups_2_v(groups_2_vSEXP);
    Rcpp::traits::input_parameter< int >::type ncenters_2(ncenters_2SEXP);
    rcpp_result_gen = Rcpp::wrap(compareClustering(groups_1_v, ncenters_1, groups_2_v, ncenters_2));
    return rcpp_result_gen;
END_RCPP
}
// compareParallelClustering
RObject compareParallelClustering(SEXP groups_1_v, int ncenters_1, SEXP groups_2_v, int ncenters_2);
RcppExport SEXP Clustering_compareParallelClustering(SEXP groups_1_vSEXP, SEXP ncenters_1SEXP, SEXP groups_2_vSEXP, SEXP ncenters_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type groups_1_v(groups_1_vSEXP);
    Rcpp::traits::input_parameter< int >::type ncenters_1(ncenters_1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type groups_2_v(groups_2_vSEXP);
    Rcpp::traits::input_parameter< int >::type ncenters_2(ncenters_2SEXP);
    rcpp_result_gen = Rcpp::wrap(compareParallelClustering(groups_1_v, ncenters_1, groups_2_v, ncenters_2));
    return rcpp_result_gen;
END_RCPP
}
// compareParallelClusteringV2
RObject compareParallelClusteringV2(SEXP groups_1_v, int ncenters_1, SEXP groups_2_v, int ncenters_2);
RcppExport SEXP Clustering_compareParallelClusteringV2(SEXP groups_1_vSEXP, SEXP ncenters_1SEXP, SEXP groups_2_vSEXP, SEXP ncenters_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type groups_1_v(groups_1_vSEXP);
    Rcpp::traits::input_parameter< int >::type ncenters_1(ncenters_1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type groups_2_v(groups_2_vSEXP);
    Rcpp::traits::input_parameter< int >::type ncenters_2(ncenters_2SEXP);
    rcpp_result_gen = Rcpp::wrap(compareParallelClusteringV2(groups_1_v, ncenters_1, groups_2_v, ncenters_2));
    return rcpp_result_gen;
END_RCPP
}
// dist_
void dist_(SEXP pInBigMat, SEXP pOutBigMat);
RcppExport SEXP Clustering_dist_(SEXP pInBigMatSEXP, SEXP pOutBigMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pInBigMat(pInBigMatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pOutBigMat(pOutBigMatSEXP);
    dist_(pInBigMat, pOutBigMat);
    return R_NilValue;
END_RCPP
}
// BigArmaEuc
void BigArmaEuc(SEXP pInBigMat, SEXP pOutBigMat);
RcppExport SEXP Clustering_BigArmaEuc(SEXP pInBigMatSEXP, SEXP pOutBigMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pInBigMat(pInBigMatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pOutBigMat(pOutBigMatSEXP);
    BigArmaEuc(pInBigMat, pOutBigMat);
    return R_NilValue;
END_RCPP
}
// BigExpPot
void BigExpPot(SEXP pInBigMat, SEXP pOutBigExp, SEXP pOutBigPot, double alpha);
RcppExport SEXP Clustering_BigExpPot(SEXP pInBigMatSEXP, SEXP pOutBigExpSEXP, SEXP pOutBigPotSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pInBigMat(pInBigMatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pOutBigExp(pOutBigExpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pOutBigPot(pOutBigPotSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    BigExpPot(pInBigMat, pOutBigExp, pOutBigPot, alpha);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"Clustering_ChiuMethod", (DL_FUNC) &Clustering_ChiuMethod, 6},
    {"Clustering_timeseries_in_centers", (DL_FUNC) &Clustering_timeseries_in_centers, 2},
    {"Clustering_compareClustering", (DL_FUNC) &Clustering_compareClustering, 4},
    {"Clustering_compareParallelClustering", (DL_FUNC) &Clustering_compareParallelClustering, 4},
    {"Clustering_compareParallelClusteringV2", (DL_FUNC) &Clustering_compareParallelClusteringV2, 4},
    {"Clustering_dist_", (DL_FUNC) &Clustering_dist_, 2},
    {"Clustering_BigArmaEuc", (DL_FUNC) &Clustering_BigArmaEuc, 2},
    {"Clustering_BigExpPot", (DL_FUNC) &Clustering_BigExpPot, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_Clustering(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
